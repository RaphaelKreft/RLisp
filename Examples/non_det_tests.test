(define prime-sum-pair (lambda (c d e f)
        (let ((a (amb c d))
              (b (amb e f)))
            (cond ((prime? (+ a b)) (list a b))
                  (#t (amb))))))
(define square (lambda (n) (* n n)))

(define prime? (lambda (n)
    (eq? n (smallest-divisor n))))

(define smallest-divisor (lambda (n) (find-divisor n 2)))

(define find-divisor (lambda (n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (#t (find-divisor n (+ test-divisor 1))))))

(define divides? (lambda (a b) (eq? (% b a) 0)))

(define an-element-of (lambda (items)
    (cond ((nil? items) (amb))
          (#t (amb (car items) (an-element-of (cdr items)))))))

(define even? (lambda (n)
    (cond ((eq? (% n 2) 0) #t)
          (#t #f))))

(println [-->prime-sum-pair (prime-sum-pair (list 1 3 5 8) (list 20 35 110))<--])
