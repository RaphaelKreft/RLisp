(define (prime-sum-pair list1 list2)
    (let ((a (an-element-of list1))
          (b (an-element-of list2)))
    (require (prime? (+ a b)))
    (list a b)))

(define (prime? n)
    (eq? n (smallest-divisor n)))

(define (smallest-divisor n) (find-divisor n 2))

(define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (#t (find-divisor n (+ test-divisor 1)))))

(define (divides? a b) (eq? (% b a) 0))



(println [-->sum-prime-pair (prime-sum-pair (list 1 3 5 8) (list 20 35 110))<--])
(prime-sum-pair (list 1 3 5 8) (list 20 35 110))