; This file contains a bunch of tests that should show that all basic language expressions work as expected
; I therefore also included some programs from the homework that was given in the lecture that this interpreter is
; part of as a project

; 1. Integer arithmetics

(println [Simple addition (+ 1 1 1 1)])
(println (+ 1 1 1 1))

(println [Simple subtraction (- 1 1 2)])
(println (- 1 1 2))

(println [Simple division (/ 10 2)])
(println (/ 10 2))

(println [Simple multiplication (* 1 2 3 4)])
(println (+ 1 2 3 4))

(println [More complex (* 2 (+ 5 (- 22 19)))])
(println (* 2 (+ 5 (- 22 19))))

; 2. List operations

(println [create a list(nothing nested, just a vector internally): (list 1 2 3)])
(println (list 1 2 3))

(println [get the rest o fa list: (tail (list 1 2 3))])
(println (tail (list 1 2 3)))

(println [create a list as in Root of Lisp or scheme (nested pairs): (cons 1 (cons 2 (cons 3 ())))])
(println (cons 1 (cons 2 (cons 3 ()))))

(println [get first element of a list: (car (cons 1 2 3))])
(println (car (cons 1 2 3)))

(println [use cdr(normal case): (cdr (cons 1 2 3))])
(println (cdr (cons 1 2 )))

(println [use cdr(corner case): (cdr (1))])
(println (cdr (1)))

(println [prepend value to a list: (cons 1 (2 3))])
(println (cons 1 (2 3)))

(println [complex expression with nested list: (car (cdr (cons 1 (cons 2 (cons 3 ())))))])
(println (car (cdr (cons 1 (cons 2 (cons 3 ()))))))

; 3. Conditions, type-checks and equality

(println 'Simple Conditional (cond ((eq? 12 6) 1) (#t 2))')
(println (cond ((eq? 12 6) 1) (#t 2)))

(println 'Typecheck list (list? (1,2,3))')
(println (list? (1,2,3)))

(println 'Typecheck number (number? 12)')
(println (number? 12))

(println '')

