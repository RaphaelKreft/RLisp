; This is the original Root of Lisp Interpreter adapted to work in RLisp

(define null. (lambda (x)
  (eq? x '())))

(define and. (lambda (x y)
  (cond (x (cond (y #t) (#t #f)))
        (#t #f))))

(define not. (lambda (x)
  (cond (x #f)
        (#t #t))))

(define append. (lambda (x y)
  (cond ((null. x) y)
        (#t (cons (car x) (append. (cdr x) y))))))

(define list. (lambda (x y)
  (cons x (cons y ()))))

(define pair. (lambda (x y)
  (cond ((and. (null. x) (null. y)) ())
        ((and. (not. (atom? x)) (not. (atom? y)))
         (cons (list. (car x) (car y))
               (pair. (cdr x) (cdr y)))))))

(define assoc. (lambda (x y)
  (cond ((eq? (caar y) x) (cadar y))
        (#t (assoc. x (cdr y))))))

(define eval. (lambda (e a)
  (cond
    ((atom? e) (assoc. e a))
    ((atom? (car e))
     (cond
       ((eq? (car e) 'quote) (cdr e))
       ((eq? (car e) 'atom)  (atom?   (eval. (cdr e) a)))
       ((eq? (car e) 'eq)    (eq?     (eval. (cadr e) a)
                                    (eval. (cddr e) a)))
       ((eq? (car e) 'car)   (car    (eval. (cdr e) a)))
       ((eq? (car e) 'cdr)   (cdr    (eval. (cdr e) a)))
       ((eq? (car e) 'cons)  (cons   (eval. (cadr e) a)
                                    (eval. (cddr e) a)))
       ((eq? (car e) 'if)  (evif. (cdr e) a))
       (#t (eval. (cons (assoc. (car e) a)
                                            (cdr e))
                                      a))))
    ((eq? (caar e) 'label)
     (eval. (cons (cadar e) (cdr e))
            (cons (list. (cadar e) (cddar e)) a)))

    ((eq? (caar e) 'lambda)
     (do (eval. (cddar e)
            (list. (list. (caadar e) (eval. (cdr e) a))
                     a)))))))

(define evif. (lambda (c a)
  (cond ((eval. (caar c) a)
         (eval. (cadr c) a))
        (#t (eval. (cdr c) a)))))

